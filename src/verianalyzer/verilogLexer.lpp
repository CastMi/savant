/**
  * Copyright CERN 2016 Michele Castellana <michele.castellana@cern.ch>
  * Copyright (C) 2016 Michele Castellana <blacklion727@gmail.com>
  *
  * This source code is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This source code is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this code.  If not, see <http://www.gnu.org/licenses/>.
  **/

/* 
 * Makes the scanner not call `yywrap()' upon an
 * end-of-file, but simply assume that there are
 * no more files to scan.
 * %option noyywrap
 */

/* 
 * Causes the default rule (that unmatched scanner
 * input is echoed to stdout) to be suppressed.
 * If the scanner encounters input that does not
 * match any of its rules, it aborts with an error.
 * This option is useful for finding holes in a
 * scanner's rule set.
 */
%option nodefault

/*
 * Instructs flex to generate an 8-bit scanner,
 * i.e., one which can recognize 8-bit characters.
 */
%option 8bit

/*
 * Instructs flex to generate a batch scanner.
 * In general, you use it when you are certain that
 * your scanner will never be used interactively, and
 * you want to squeeze a little more performance out
 * of it.
 */
%option batch

/*
 * Instructs flex to generate a scanner which never
 * considers its input interactive.
 */
%option never-interactive

/*
 * Directs flex to generate a scanner that maintains
 * the number of the current line read from its input
 * in the global variable yylineno
 */
%option yylineno
%option debug
%option verbose
%option warn

%{

#include <iostream>
#include <fstream>
#include <stdint.h>
#include <inttypes.h>
#include <set>
#include <string>
#include <vector>
#include <list>
class VerilogFlexLexer;
#include "verilogParser.hpp"
#include "verilogLexer.hpp"

VerilogFlexLexer::VerilogFlexLexer(std::istream* argin = nullptr, std::ostream* argout = nullptr) : yyFlexLexer(argin, argout) {};
VerilogFlexLexer::~VerilogFlexLexer() {};
%}

/*=========================================================================
                          TOKEN DEFINITIONS
=========================================================================*/

ID          [a-z_A-Z][a-zA-Z_0-9]*

%%

"," { return COMMA; }
";" { return SEMI; }
"(" { return LPAR; }
")" { return RPAR; }
"input" { return K_input; }
"output" { return K_output; }
"endmodule" { return K_endmodule; }
"module" { return K_module; }
[ \t\r\n]+      { }
{ID}            { lvalp->text = strdup(YYText()); ASSERT(lvalp->text); return IDENTIFIER; }
.               { LexerError("Lexical Error"); }

%%
