/**
  * Copyright CERN 2016 Michele Castellana <michele.castellana@cern.ch>
  * Copyright (C) 2016 Michele Castellana <blacklion727@gmail.com>
  *
  * This source code is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This source code is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this code.  If not, see <http://www.gnu.org/licenses/>.
  **/
%code requires{
struct VerilogFlexLexer;
// The %union uses the following
#include <vector>
#include "IIRScram_IdentifierList.hh"
#include "IRBasicDataTypes.hh"
#include "plugin_class_factory.hh"
class symbol_table;
typedef struct {
   IIR_Mode dir;
   char* name;
} portl;
/**
  * The verilog parser driver will include this header and therefore
  * it needs this declaration.
  */
void verilog_parse(const std::string & fname, IIR_LibraryDeclaration* the_lib, symbol_table* sym_tab, IIR_DesignFile* verilog_file, StandardPackage *, plugin_class_factory* fac);
}

%{
#include "IIR_LibraryDeclaration.hh"
#include "StandardPackage.hh"
#include "IIRScram_DesignFile.hh"
#include "IIRScram_EntityDeclaration.hh"
#include "IIRScram_LibraryUnit.hh"
#include "IIRScram_Identifier.hh"
#include "IIR_DeclarationList.hh"
#include "IIRScram_ConcurrentConditionalSignalAssignment.hh"
#include "IIRScram_ArchitectureDeclaration.hh"
#include "IIR_PortList.hh"
#include "IIR_ArchitectureStatementList.hh"
#include "IIRScram_InterfaceDeclaration.hh"
#include "IIRScram_SignalInterfaceDeclaration.hh"
#include "library_manager.hh"
#include "IIR_LibraryUnitList.hh"
#include "IIR_DesignFile.hh"
#include "IIRScram_SimpleName.hh"
#include "IIRScram_SelectedName.hh"
#include "IIRScram_SubprogramDeclaration.hh"
#include "IIRScram_DeclarationList.hh"
#include "IIR_IntegerSubtypeDefinition.hh"
#include "IIRScram_DesignatorByAll.hh"
#include "IIRScram_EnumerationSubtypeDefinition.hh"
#include "symbol_table.hh"
#include "savant_config.hh"
#include "verilogParser.hpp"
#include "verilogLexer.hpp"
int yyFlexLexer::yywrap(){return 1;}
int yyFlexLexer::yylex(){return 0;}

#include <string>
#include <list>
#include <cstring>
#include <fstream>

int yylex (YYSTYPE *lvalp, VerilogFlexLexer* lexer);
int yyerror (IIR_DesignFile* ir_verilog, VerilogFlexLexer* lexer, plugin_class_factory* fac, char const *msg);

symbol_table * my_symbol_table;
StandardPackage* my_package;
IIRScram_LibraryUnit * ent;
IIR_LibraryDeclaration * lib_dec;
IIRScram_LibraryUnit * arc;

%}


/*
 * The following lines result in the signatures
 * int yyparse (plugin_class_factory* fac, VerilogFlexLexer* lexer, IIR_DesignFile* ir_verilog);
 * int yyerror (IIR_DesignFile* ir_verilog, VerilogFlexLexer* lexer, plugin_class_factory* fac, char const *msg);
 * TODO: add a flag for the lever or warning
 */
%parse-param {IIR_DesignFile* ir_verilog}
%parse-param {VerilogFlexLexer* lexer}
%parse-param {plugin_class_factory* fac}

/*
 * The following line results in the signature
 * int yylex (VerilogFlexLexer* lexer);
 */
%lex-param {VerilogFlexLexer* lexer}

%union {
      bool flag;
      char letter;
      int  int_val;
      char* text;
      std::vector<char*>* strings;
      IIR_Mode direction;
      portl portlist;
      IIRScram_IdentifierList* id_list;
      std::vector<portl*>* params;
};

%define api.pure full
%define parse.trace
%debug
%expect 0

/* Token with values */
%token <text> IDENTIFIER

/* Token with no values */
%token SEMI COMMA LPAR RPAR EQ
%token list_of K_endmodule K_inout K_input K_module K_output K_wreal K_supply0 K_supply1 K_tri K_tri0 K_tri1 K_triand K_trior K_uwire K_wire K_wand K_wor

/* Non end literals with values */
%type <id_list> list_of_identifiers module_port_list_opt
%type <direction> port_direction
%type <portlist> module_item
%type <params> module_item_list

%start source_text
%%

source_text
   : description_list
   ;

description
  : module
  ;

dimensions_opt
  : {  }
  | dimensions {  }
  ;
dimensions
  : {}
  ;

description_list
  : description
  | description_list description
  ;

module_port_list_opt
  : LPAR list_of_identifiers RPAR
    {
       $$ = $2;
    }
  | {
       $$ = 0;
    }
  | LPAR error RPAR
    {
        //yyerror(@2, "Errors in port declarations.");
	     yyerrok;
	     //$$ = 0;
     }
  ;

module
  : K_module IDENTIFIER
      {
      lib_dec->set_base_info(ir_verilog, 0, 0, 0);
      my_symbol_table->open_scope( lib_dec );
      ent = new IIRScram_EntityDeclaration();
      arc = new IIRScram_ArchitectureDeclaration();
      // return value
      IIR_Identifier * ident = IIRBase_Identifier::get( $2, strlen($2), fac );
      // entity_declaration
      ent->set_declarator (ident);
      arc->set_declarator (ident);
      // FIXME: all the zeros are the debugging infos
      ent->set_base_info(ir_verilog, 0, 0, 0);
      arc->set_base_info(ir_verilog, 0, 0, 0);
      dynamic_cast<IIRScram_EntityDeclaration *>(ent)->_add_declaration_and_open_scope();
      }
    module_port_list_opt SEMI
      {
      dynamic_cast<IIRScram_EntityDeclaration*>(ent)->get_port_clause()->set_base_info(ir_verilog, 0, 0, 0);
      for( IIRScram_Identifier* id = dynamic_cast<IIRScram_Identifier *>($4->first());
      id!=NULL;
      id = dynamic_cast<IIRScram_Identifier *>($4->successor(id)) ){
        IIRScram_InterfaceDeclaration *new_decl = new IIRScram_SignalInterfaceDeclaration();
        
        dynamic_cast<IIRScram_SignalInterfaceDeclaration*>(new_decl)->set_signal_kind(IIR_NO_SIGNAL_KIND);
        new_decl->set_declarator(id);
        new_decl->set_mode(IIR_IN_MODE);
        new_decl->set_base_info(ir_verilog, 0, 0, 0);
        ASSERT(my_package->get_positive_type() != NULL);
        new_decl->set_subtype(my_package->get_positive_type());
        dynamic_cast<IIRScram_EntityDeclaration*>(ent)->get_port_clause()->append(new_decl);
      }
      my_symbol_table->add_declaration( dynamic_cast<IIRScram_EntityDeclaration*>(ent)->get_port_clause());
      }
    module_item_list
    K_endmodule
      {
      dynamic_cast<IIRScram_EntityDeclaration*>(ent)->get_entity_declarative_part()->set_base_info(ir_verilog, 0,0,0);
      dynamic_cast<IIRScram_EntityDeclaration*>(ent)->get_entity_statement_part()->set_base_info(ir_verilog, 0,0,0);
      dynamic_cast<IIRScram_EntityDeclaration *>(ent)->_type_check();
      if( lib_dec->get_primary_units()->in_list( lib_dec ) == false ){
         lib_dec->get_primary_units()->append( ent );
      }
      library_manager::instance()->parse_into_work_dir( ent );
      my_symbol_table->close_scope( ent );
      
      ir_verilog->get_library_units()->append(ent);
      my_symbol_table->close_scope( lib_dec );
      my_symbol_table->open_scope( lib_dec );
      dynamic_cast<IIRScram_ArchitectureDeclaration *>(arc)->_add_declaration();
      my_symbol_table->open_scope(arc);
      
      IIRScram_EntityDeclaration *entity_decl = 
      dynamic_cast<IIRScram_EntityDeclaration *>(library_manager::instance()->lookup_entity( TRUE, 
											     ent->get_declarator(), 
											     lib_dec,
											     my_package,
											     fac));
      ASSERT( entity_decl );
      dynamic_cast<IIRScram_ArchitectureDeclaration*>(arc)->set_entity(entity_decl);
      (dynamic_cast<IIRScram_Declaration *>(entity_decl))->_make_interface_visible( my_symbol_table );
      ir_verilog->get_library_units()->append(arc);
      dynamic_cast<IIRScram_ArchitectureDeclaration *>(arc)->_type_check();
      library_manager::instance()->parse_into_work_dir( arc );
      my_symbol_table->close_scope( arc );  
      my_symbol_table->close_scope( lib_dec );
      }
  ;

module_item_list
  : module_item_list module_item
    {
    ASSERT($2.name != NULL);
    $1->push_back(new portl($2));
    $$ = $1;
    }
  | module_item
    {
    $$ = new std::vector<portl*>{new portl($1)};
    }
  ;

module_item
  :  port_direction IDENTIFIER SEMI
      {
      ASSERT($2 != NULL);
      $$ = { $1, $2 };
      }
	;

expression
  : {}
  ;

net_type_opt
  : {}
  ;

port_direction
  : K_input 
  {
  $$ = IIR_IN_MODE; 
  }
  | error
  {
  // FIXME:
  // by default is considered input!
  yyerror(ir_verilog, lexer, fac, "port_direction not recognized. The port is assumed to be input");
  $$ = IIR_IN_MODE; 
  }
  | K_output
  {
  $$ = IIR_OUT_MODE;
  }
  ;

list_of_identifiers
	: list_of_identifiers COMMA IDENTIFIER
                {
                ASSERT($3);
                ASSERT($1);
                $1->append(IIRBase_Identifier::get(std::string($3), fac));
                $$ = $1;
                }
	| IDENTIFIER
                {
                ASSERT($1);
                IIRScram_IdentifierList * the_list = new IIRScram_IdentifierList();
                the_list->append(IIRBase_Identifier::get(std::string($1), fac));
                $$ = the_list;
                }
	;

data_type_or_implicit
  : {}
  ;
port_declaration
	: K_input net_type_opt data_type_or_implicit IDENTIFIER dimensions_opt
	| K_input K_wreal IDENTIFIER
	| K_inout net_type_opt data_type_or_implicit IDENTIFIER dimensions_opt
	| K_inout K_wreal IDENTIFIER
	| K_output net_type_opt data_type_or_implicit IDENTIFIER dimensions_opt
	| K_output K_wreal IDENTIFIER
	| K_output net_type_opt data_type_or_implicit IDENTIFIER EQ expression
	;

list_of_port_declarations
	: port_declaration
		{
		}
	| list_of_port_declarations COMMA port_declaration
	        {
		}
	| list_of_port_declarations COMMA IDENTIFIER
		{
		}
	| list_of_port_declarations COMMA
		{
		}
	| list_of_port_declarations COMMA
		{
		}
   ;

net_type
	: K_wire    {  }
	| K_tri     {  }
	| K_tri1    {  }
	| K_supply0 {  }
	| K_wand    {  }
	| K_triand  {  }
	| K_tri0    {  }
	| K_supply1 {  }
	| K_wor     {  }
	| K_trior   {  }
	| K_uwire   {  }
	;

%%

void verilog_parse(const std::string & fname, IIR_LibraryDeclaration* the_lib, symbol_table* sym_tab, IIR_DesignFile* verilog_file, StandardPackage* mypackage, plugin_class_factory* fac)
{
   my_symbol_table = sym_tab;
   my_package = mypackage;
   lib_dec = the_lib;
   std::istream* is = new std::ifstream(fname.c_str());
   VerilogFlexLexer *lexer = new VerilogFlexLexer(is, 0);
   yydebug=1;
   yyparse (verilog_file, lexer, fac);
}

int yylex (YYSTYPE *lvalp, VerilogFlexLexer* lexer)
{
   lexer->lvalp = lvalp;
   return lexer->yylex();
}

int yyerror (IIR_DesignFile* , VerilogFlexLexer* lexer, plugin_class_factory* , char const *msg)
{
   lexer->yyerror(msg);
}
